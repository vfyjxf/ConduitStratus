plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.21'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenCentral()
    maven { url = "https://maven.quiltmc.org/repository/release/" }
    maven { url = "https://jitpack.io" }
    maven { url = "https://dvs1.progwml6.com/files/maven/" }
    maven { url = "https://maven.blamejared.com/" }
    maven { url = "https://modmaven.dev" }
    maven { url = "https://maven.parchmentmc.org" }
    maven { url = "https://maven.shedaniel.me" }
    maven { url = "https://repo.kenzie.mx/releases" }
    maven { url = "https://maven.tterrag.com/" }
    maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url = 'https://thedarkcolour.github.io/KotlinForForge/' }
    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

base {
    archivesName = mod_name
}
evaluationDependsOn(":CloudLib")
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

static def isJetBrainsRuntime() {
    return System.getProperty('java.vm.vendor').contains('JetBrains')
}

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // accessTransformers.add('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            client()
            gameDirectory = project.file('run-client')
        }
    }

    runs {
        client {
            client()
            gameDirectory = project.file('run-client')
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            gameDirectory = project.file('run-server')
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            gameDirectory = project.file('run-data')
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
            if (isJetBrainsRuntime()) {
                jvmArgument "-XX:+AllowEnhancedClassRedefinition"
                jvmArgument "-XX:HotswapAgent=fatjar"
            }
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
        "cloudlib" {
            sourceSet project(":CloudLib").sourceSets.main
        }
    }
}
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
    implementation project(":CloudLib")
    additionalRuntimeClasspath(compileOnly("org.eclipse.collections:eclipse-collections-api:11.1.0"))
    additionalRuntimeClasspath(compileOnly("org.eclipse.collections:eclipse-collections:11.1.0"))

}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            cloudlib_version       : project(":CloudLib").version
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
